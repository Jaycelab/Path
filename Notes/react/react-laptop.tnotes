function App() {
	const age = 17;
	const isGreen = false;
	
	return (
	<div>
		{age >= 18 ? <h1>Overaged</h> : <h1>Underaged</h1>}
		<h1 style={{color: isGreen? '"green : "red'}}:> This has color </h1>
		{isGreen && <button> This is a button</button> }
	</div>
	)
}
- Variables must always begin with a capital
- Variables is always wrapped inside curly braces .
- Components is always surrounded by a closing block similar to HTML. Eg. <> </> or <div></div> AND <Component Name /> 
- .map - Requires a call back function . Important for react to display an element in an array from the UI
{names.map((value, key) => {
 }});
 
 - For react, a warning will show if the 'argument' is not assigned. A way to remove this warning is to assign the key in the return statement
Eg. return <h1  key ={key}> {name}</h1> 


** Setting a variable object as a component with props **

function App () {
	const users = [
	{name: "Pedro,", age: 21},
	{name: "Jake", age: 25},
	{name: "Jessica", age: 45},
	];

	return (
	<div className ="App">
	{users.map((value,key) => {
		return (
		// instead of returning the element for each of the array, will return the user component below instead 
		<User  name={user.name} age={user.age} />
		// components with it's props "name" and 'age'
		);
	}}) 
	</div>
	);
};

**User component with props

const User = (props) => {
	return(
	<div>
	 {props.name} {props.age}
	</div>
	);
};

- When creating new components, creating different files for new components is recomennded. For example, we can create a User.js file for the user component

- An export is required on the file that we will be exporting from
Eg. export const User = (props) => {

-Import example below from the App.js files
import { User } import from "./User" -- does not require js extension when referencing. The component gets inserted inside the {} and multiple components can be added 