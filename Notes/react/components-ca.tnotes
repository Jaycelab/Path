- A component is a small, resuable chuck of code that is reponsiblefor rending some HTML and re-rendering it when data changes. 

*REVIEW*
</ func name> as opposed to curly brackets {}. {} only when assigned variables?

- ReactDOM import is typically imported from 'react-dom/client'. Be sure to not forget to add /client. The methods imported from 'react-dom' interacts with the DOM. Methods imported from 'react' do NOT interact with the DOM at all and does not engage directly with anything that isn't part of React
 
*The DOM is techincally used in React apps, however it is not a part of REACT. Methods imported from 'react' are only for pure React purposes such as creating components or writing JSX elements.

//import React from 'react;
// import ReactDOM from 'react-dom/client'

- Adding a parathensis () within an div element is OPITIONAL . It is not strictly required
- Components can be thought of as reusable chunks of Javascript functions that take some kind of input and return a React element.
- Functional components === Javascript functions

//For a very long time in React development, it was necessary to import React in your JavaScript files that used React components, but since React v17.0 it is no longer required

- Comments in JSX is similar to Javascript however they also need to be wrapped in curly brackets. {/* This is a JSX comment*/}

- In the past, React components were defined using Javascript classes but has now been replaced with Hooks. 
- Functional component names must begin with a capital unlike Javascript where camelCase is used. This style is called PascalCase and is how JSX tags are compiled. Capitalization indicates that is is a React comonent rather than an HTML tag

- import React from 'react'; === Creates a Javascript object that contains properties needed to make React function such as React.createElement();

- import ReactDOM from 'react-dom/client' creates another Javascript object. This object contains methods that help React interact with the DOM, such as ReactDOM.create();

- render method is the only method that must always be declased inside a component.
However, you do not always have to return an element inside the render() method and instead can return a Boolean or a null value

- React typically has two core files: App.js and index.js. App.js is the top level of the application and index.js is the entry point

- When importing a component be sure to always exclude the file name and add ./ before the function name.

*Steps for rendering:*
1. call createRoot() method to create a React root container for displaying conent. React apps typically have a single root DOM node, and everything inside is managed by React DOM. In other words, we give createRoot a DOM element to render in such as .getElementById or querySelector and React will take over managing the DOM inside it.
2

- Owl comonent object example:
 
import React from 'react';

const owl = {
  title: 'Excellent Owl',
  src: 'https://content.codecademy.com/courses/React/react_photo-owl.jpg'
};

// Define function in PascalCase. Wrap in parenths and brackets for variables. Dot notation for objects
function Owl(){
  return (
    <div>
      <h1>{owl.title}</h1>
      <img 
      src={owl.src}
      alt={owl.title}/>
    </div>
  );
};

export default Owl;

function Promo () {
	return (
	
	<div> className = "promo-selection">
		<div>
			<h1 style= {{color: "tomato", fontSize: "40px", fontWeight: "bold"}}>
				{props.heading}
			<h1>
		</div>
		
		<div>
			<h2>
				{props.promoSubheading}
			</h2>
		</div>
	);
}

export default Promo;

**JavaScript Expression Syntax**
<h1 style ={}>

- The code aboves means that whatever code you add inside these opening and closing curly braces is to be parased as regular JavaScript. 

- The double curly bracket example is called a "style object literal". Another way of writing this is 

<h1>
	style={
		{
			color: 'tomato',
			fontSize: '40px'
		}
	
	}
</h1>

- Aside from converting each property to a string, the property also has to be converted to camelCase and eliminating any hyphens as seen in CSS

- Besides inlining a style object literal, you can also save it inside a variable and then use the variable instead of passing an object literal. 

- Remember to declare a variable BEFORE a return statment as show below:

function Promo() {

cost styles = {
	color: "tomato".
	fontSize: "40px"
}

return (
	<div className="promo-section">
		<div>
			<h1 style={styles}>
				{props.heading}
			</h1>
		</div>
		<div>
			<h2>{props.promoSubheading}</h2>
q		</div>
	</div> 
);
}

- This approach of declaring a variable and assigning styling makes the components more self-contained because they come with their own styles built-in; however it also makes them a bit harder to maintain? **review

- When applying CSS to JavaScript, you would need to first declare a variable to the property name , remove any hyphens, convert any numbers or non-number values to strings, and write the variable using pacscalCase. Example component below utilizing CSS in a JSX expression:

function Sidebar() {
	const asideStyle = {
		background: "azure",
		width: "calc(30% - 10px)",
		marginLeft: "10px"
	}

	return (
		<aside 
			style={asideStyle} 
			className="sidebar-component>
			<h2>Sidebar Content Here</h2>
		</aside>
	)
};

*Components as Fuction Expressions*

- Function Declaration as a component in React

function Nav(props) {
	return (
		<ul>
			<li>{props.first}</li>
		</ul>
	)
}

- Function declaration as a function expression:

const Nav = function (props){
	return (
		<ul>
			<li>{props.first}</lil>
		</ul>
	)
}

- The above 2 expressions are similar however it is now using an anonymous (nameless) function by assinging it to a variable using the const keyword. 
- Changing a component from a function declaration to a function expression doesn't change it's behavior or how the Nav component is rendered.

* Function declaration using arrow functions (=>)*

- Arrow function is a core feature that was released in ES6 and the main benefits is the shorter syntax used. Example below:

cost Nav = (props) => {
	return(
		<ul>
			<li>
			{props.first}
			</li>
		</ul>
	)

}

- Above example elimates the need to write function while still declaring a const variable
- The arrow itself can be thought of as the replacement for the function keyword
- The parameters that this arrow function accepts are listed before the arrow itself

ES5 vs Arrow Function

ES5
const example = function() {};

ES6
const example = () => {} // the parameters is before the arrow, thus accepting any arguments before the arrow itself

- Another key point in using arrow functions is that the paranthesis is optional if only a single parameter is accepted. So to simplify, the shorter version to write the above code example would be:

const Nav = props => 

**FOR ANY NUMBER OF PARAMETERS OTHER THAN A SINGLE PARAMETER, USING PARENTHESIS IS COMPULSORY
 
function Nav = () => {} //this example would be used if a component was NOT accepting parameters

*IMPLICIT RETURN*
- This is used if the entire component is in a single line of code (arrow on the same line) Example:

const Nav = () => <ul><li>Home</li></ul> // no curly braces, return statement, divs or parenths

Example using forEach() array method:
[10, 20, 30].forEach(item => item * 10)

ES5 Version:
[10,20,30].forEach(function(item){
	return item * 10
	};
)

// forEach() method accepts a single parameter: an anoynymous function. If you write this anonymous function in ES5 syntax, then it would contain a return statement:

ES5 Version:
function(item){
	return item * 10
}

function calc (num) {
	return num * 20
}

ES6 Version: 
item => item * 10

num => num * 20;

- Both these functions perform the same tasks, however the syntax is different. The ES6 version is much shorter becase:
1. The arrow function has a single parameter, so paranthese is not required around the item parameter (left of the arrow)
2. Since the arrow function fits on one line of code, you don't need to use curly braces around the function body or the return keyword as it is IMPLICIT
