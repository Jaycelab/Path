- Reacts render() method only updates DOM elements that have changed, meaning that if you render the exact same thing twice in a row, the second render will do nothing. 

*Virtual DOM*
- By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called “diffing.”

- Steps when DOM is updated in React
1. The entire virtual DOM gets updated
2. The virtual DOM gets compared to previous DOM before it updated. React then figures out which objects have changed.
3. The changed objects, and the changed objects only, gets updated on the real DOM.
4. Changes on the real DOM is reflected on the screen in real time, hence the changes 'reacts'

- Deconstructing arrays can be set by first assigning a variable to an object (key value pairs)
Followed by a bracket wrapped variable(s) asigned to original variable

*Function Deconstructing*
let truck = {
  model: '1977 Mustang convertible',
  maker: 'Ford',
  city: 'Detroit',
  year: '1977',
  convertible: true
};

const printCarInfo = ({model, maker, city}) => {
  console.log(`The ${model}, or ${maker}, is in the city ${city}.`);
};

printCarInfo(truck);
// Prints: The 1977 Mustang convertible, or Ford, is in the city Detroit.

- Destructuring is a way to unpack values from arrays and objects and assign them to variables or parameters

- In JSX, it is required to include a self closing tag (slash before the final angle bracket) as opposed to HTML where it is optional. Without a slash, it will create an error in react

- Expressions in JSX needs to be wrapped inside {} brackets if within an element or it will evaluate it as "text" similar to HTML.

- Curly braces themselves won't be treated as JSX or as Javascript. Instead they are treated with markets that signal the beginning and end of a Javascript injection into JSX. 

- Variables can be accessed inside of a JSX expression even if it is outside of it's scope

*JSX* 
- When writing JSX, it's common to use variables to set attributes. For example:

const sideLength = "200px";

const panda = (
<img 
  src = "images/panda.jpg"
  alt = "panda"
  height = {sideLength}
  width = {sideLength}
/>
);

- Creating a new line per attribute will make the code more easily readable. 
- Object properties are also often used to SET attributes. Example below: 

const pics = {
  panda: "http://bit.ly/1Tqltv5",
  owl: "http://bit.ly/1XGtkM3",
  owlCat: "http://bit.ly/1Upbczi"
}; 

const panda = (
  <img 
    src={pics.panda} 
    alt="Lazy Panda" />
);

const owl = (
  <img 
    src={pics.owl} 
    alt="Unimpressed Owl" />
);

const owlCat = (
  <img 
    src={pics.owlCat} 
    alt="Ghastly Abomination" />
); 

*Event Listener*
- An event listerners attribute's name should be sometihng similar to onClick or onMouseOver. The word 'on' plus the type of event that you are listening for. Refer to https://react.dev/reference/react-dom/components/common for common event listener names 

- An event listerners attribute value should be a function. The above example above would only work if the name were a valid function that had been defined somewhere else

- Event listeners in HTML is written in all lower case, however in JSX event listerners are written similar to Javascript or camelCase, in this case onClick or onMouseOver. Example of an image onClick event listener below: 

const kitty = (
  <img onClick={makeDoggy}
    src="https://content.codecademy.com/courses/React/react_photo-kitty.jpg" 
    alt="kitty" />
);

root.render(kitty);