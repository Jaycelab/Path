RenderDOM.react(<h1></h1>, document.getElementById(""))
// RednerDOM is a global variable, .react is an included method. First paramenter is what you want to place on the screen.
// First parameter is what you want to place on the screen, second parameter is where you want to place it 

- React combines small amounts of files into single components so that each component has it's own styling and own functionality that it controls that can perform different functions and have different appearances.

- A perfect example is Twitter. It is able to load and refresh feeds while retaining the display of the remaining web page.

- Creating a div with a root class is always required in the body of the HTML page (index.html). Everything created using React will be inserted inside that div

- ReactDOM.render() : Function that takes in 3 inputs. 
1. What to show 
2. Where to show it 
3. (optional) When render has started 

- JSX - When the HTML that gets picked up by a compiler and converted (compiled down) to actual Javascript. The compilier is included with the require("react") module

- Babel : Javascript compilier that converts plain JS that is compatabile for every browser to read and render. 

- The HTML thats inputted into the JS file is converted by running the HTML tags through the react module which then converts and compiles it down to Babel for universal usage across all browsers 

- This essentialy cuts down the amount of time to write a simple code as shown below 

let h1 = document.createElement("h1");
h1.innerHTML = "Hello World!";
document.getElementByID("root").appendChild(h1)

VS

ReactDOM.render(<h1>Hello World!</h1>, document.getElementById("root"));

- The new method for importing the REACT module now consists of using the keyword "import" and "export" rather than assining a valuable 

- When using render, you can combine multipel HTML elements by wrapping the elements inside a div container. Any additional elements added will automatically be rendered as a single HTML component

- JSX gives the ability to inserts HTML inside a JS file and then insert Javascript inside the inner html. 

- You can attach a variable within an inner HTML by wrapping the variable name inside curly braces {}. Expressions and methods are also allowed inside the curly braces. However , statements are NOT allowed . (example, if , loops, etc)

- When adding multiple variables, you can eliminate the need of adding a + "" as the inner HTML treats the line as a string element, so simply pressing space will also create a space as well

- Template literals also works

- Two ways to export modules in JS
1. Default Exports
2. Named Exports

1. export default 'function name'
2. export function name OR
export {function, function} (if mulitple functions)

- Importing an export using default

import functionname from "./xx ";
eg. import addTwo from "./addTwo"
(export default addTwo)
*** You would type the keyword from followed by location of the file WITHOUT the js.extension

- React JSX code is transpiled to plain Javascript code so that it can work with modern browsers. Example: 

-- function Heading(props) {
    return <h1>{props.title}</h1>
}

will return plain JS code

-- "use strict";

function Heading(props) {
  return /*#__PURE__*/React.createElement("h1", null, props.title);
}

The code returns React.createElement("h1", null, props.title);
without the comments which creates a React object, which is createElement() method. The method is invoked into 3 arguments, 'h1', null, props.title


- 1st argument is for WHAT the DOM is to render.
- 2nd argument is any HTML arugument that should be added. 
- 3rd property is the contents of the innerHTML of the DOM elment specified as the first argument. So in this case , it will be the contents of the innherHTML of the 'h1' element.

- Javascript functions can be used as a component in React 

- Return statements can be spread over multiple lines by surrounding the code that follows the return keyword with an opening and closing paranthesis 

- function Example () {
	return (<h1>Example</h1>)
}