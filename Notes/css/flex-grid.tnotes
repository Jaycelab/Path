
CSS Grid overall layout  of the page
CSS Flex box inner elements

Flex container is the element that holds the flex items . Flex items are direct children of flex containers. A container is created with display: flex;
**For example , if a div with a container class has a display:flex, all the divs , paragraphs and images below will also be affected by the flex container

Flex container Properties:
flex-direction
flex-wrap
flex-flow
justify-content
align-items 
align-content

Flex Item properties:
order
flex-grow
flex-shrink
flex-basis
align-self

Main Axis – flex-direction:row ;
Horizontal (left to right)

Cross Axis – flex-direction: row;
Vertical (up and down)

Main Axis – flex-direction: column:
Vertical (Up to down)

Cross Axis – flex-direction: column:
Vertical (Up to down, from Y axis)

Prior to flex box, we previously had to create a float property in CSS that would display items in a row, however new contents would also be added on the same row. This would be fixed by adding an “after” property in CSS along with an empty content, a display block and clear: block;

Justify-content – Moves items within a row if used on the main(x) axis

Align-items: Align items moves items (or text) within a column but requires a height property.ox Example, you can center a Title in the middle of a container (box)

Flex-direction:column – Creates a column on the x axis (cross axis)reversed
Align-items: start will move the columns to the start (or left) of the page

To center a text within a display:flex item, you can also add in another display flex and justify-content to center main axis. You can also align-items in the center by using align-items center to center the y axis

Flex-wrap is like text wrap. Any addition items within a container that cannot fit will move to the next row (or column)
Flex-basis – adjust each item in each container. Can customize different sizes
Flex-Grow – default of 0. 

Flex-flow: (direction) (wrap). Flex flow is a shorthand version of both row and wrap in one property

Align-content: Aligns items within a row. Similar to justify-content but works with flex-wrap 

Flex: This is a shortcut property with the values of grow, shrink and basis
Flex-basis: Gives a property a min width(similar)
Flex-Grow:  Grows each item to take up a container. Begins at 0 and can select a different grow using nth-child. For example, if an element has the same flex basis at 100px but a different element is selected nth-child, the flex grow property will also affect the targeted element 
Flex-shrink: Similar to flex-grow but will reduce the sizing. For example, a nth-child selected property will have a larger shrink value . Both flex-grow and flex-shrink will avoid any overflow for responsive web pages

You can select (nth-child) to filter out a single element to have a larger effect on its growth and shrink properties 

Order: Assigning a value to an element decides the order in which the element is displayed. The higher the value, the less priority . A -1 has a higher value than a 4 , for example. 
***If an element has a reverse property, than the above statement is reversed, meaning that a higher number will have priority and a negative (or 0) will have less priority. 

CSS Grid
Grid-auto-flow: row is the quickest way after display:grid to assign an element to a grid
Grid-auto-flow: column will create a column (horizontal) 

Grid-template-columns: Create individual width per column divisible by the total amount of divs. Example, 3 values with 6 dives will create 3 columns AND 2 rows.

Fraction units (fr) is commonly used in CSS Grid. A higher value gives priority than a lower value.
You are able to mix different values using px, rem, %, fr, etc.

Grid-template-columns: repeat (4, 1fr) is a shortcut from the above statements. The values inside the () reflects the width column inputted . If the amount of values does not match the amount of elements, the elements take on the previous values

Grid-auto-rows: This adds how “tall” a column is. We can also use min-max by combining both a min and max sizing. Setting ‘auto” will reflect a response design so that as you increase the page, the grid row also expands in size. And by setting a min, the height will never go below the min value .

(***You can also use grid-template-rows)
row-gap: Adds a gap in between a row
column-gap: adds a gap between each columns
gap: combines both row and column. Row value will be assigned first. Shortcut 1 value will assign both values

Grid-column-start (end) Assigns the start and end of an element based on the amount of grid containers (or divs, boxes) . For example, a 6 grid div container, with a selected element of start: 1 and end 4, will take up 4 spaces (left to right) with 2 spaces assigned to default container
This also applies with row but will take up a designated row . The ‘end’ ends before the number value

Shortcuts
Grid-column: start / end; 
grid-row: start / end

We can nest a grid inside a display grid. Combining align-content and justify-content is a common technique to center a text in the middle of a container

place-content: is a combination of justify and align content. We can use a single value (example ‘center) to automatically assign a center value 

Grid-template-areas:  Specifically assign the number of rows and columns using a blank prop within a quote. Example below with 9 columns

‘hd hd hd hd hd hd hd hd hd ‘
‘mn mn  mn mn mn mn sb sb’

grid-template-column(or row): repeat is the same as typing in 1fr, 1fr, 1fr 1fr. Instead you can type repeat(4) 1r. FR(fr) is commonly used in Grid as opposed to px rem and % as you don't need to guess to evenly space out each column or row.
It is commonly combined with a min max() to set a minimum and maximum width/height.
Auto-fill will fill a container as long as the size is set and there is space within the container 

repeat (auto-fill) will automatically fill up each element for a responsive design and will create a column if there is additional space
repeat (auto-fit) will automatically fill a container but will NOT create any additional spaces if available within a container.

With grid-template-column/row we are also able to individually assign names to each element by surround the values inside a []. 
Example below with 3 columns and 2 rows
grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1 fr;
grid-template-rows: 100px 50px;

Any subsequent columnns or rows will a default value. However you can use the following below to set a defauly for any subsquent elements that you add in the future by using the properties below:
grid-auto-columns: ;
grid-auto-rows: ;

Whenever any new elements are added, you can use the following below to automatically create a new row or column
grid-auto-flow: ;

grid-column: 10/11 means that you are selecting a fixed location value by assigning a start of column 10 and ending in column 11. This also applies to grid-row

**Note: Adding an element after the selected grid-column element will fill in the empty spaces that are not assigned, rather thann place the elements after. This is possible with 
grid-auto-flow: dense;  You can also use row-dense or column-dense

grid-column-gap and grid-row-gap can be shorted by 
grid-gap: row column . You can also enter 1 value to assign both columns and rows;

Align-items: Positions items vertically within a grid cell. It defaults at stretch

Justify-items: Positions items horizontally (x-axis) within a cell. Default is also set to streth

place-items : is the shortened version for align and justify items with the order being center followed by stretch. You can also assign a single value to assign both properties. 

align-content / justify-content / place-content - Assigns an element vertially within a CONTAINER. It is defautl start

As a summary, items are usually the text or images within a cell. And content is the cell within a grid container 

grid-template-areas: each double quote represents a single row. So for example, if you have 3 rows, you would set up three 'double quotes', Example below

grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end] (*THREE COLUMNS*)
grid-auto-rows: 60px auto 100px (**THREE ROWS WITH 1st row at 60px , 2nd row at auto and 3rd row at 100px)

grid-template-area:
'header' 'header' 'header'
'main' 'main' 'sidebar'
'footer' 'footer' 'footer'

(**The reason we list 'header' 3 times is because it is a visiual represenation of EACH column. In this case , since we previosly defined 3 columns, we would be listing header 3 times to span the full width of the container)

.header{
	grid-area: header;
}
.main{
	grid-area: main;
}
.sidebar{
	grid-area: sidebar;
}
.footer{
	grid-area: footer;
}

Example above, the 3 columns of header and footer represent a column of three rows. And 2 columns for MAIN and 1 column for sidebar as reference aboved ('main' 'main' 'sidebar')

You can think of grid area as a 'blueprint' of your cells within a container. You can name them anything in the grid-area section however its best advised to reference a similar name as the class

grid-template: is a shorthand version in which you can combine grid-template-column/row + grid-template-area. The values are in between a set of quotes and not indvidually Example below:

grid-template: 
'h h' h' 60px
'main main sidebar' auto
'footer footer footer' 100px

grid: ; is a shorthand version of the following below:

grid-template-rows: 50px 200px;
grid-template-columns: repeat(3, 1fr);
grid-auto-rows: 100px;
grid-auto-flow: row;

grid: 50 px 200px / repeat (3, 1fr); (**rows and columns)

We can set a row and column to be both implicit and explicity however we CANNOT set a value for each row and column to be both. The following below is fine:

grid: auto-flow 100px / repeat (3, 1fr);

If manually entering a start and end, you can use a negative value for the end value to span the entire column/row. 
We can alo use the name as the value when determing the width/height. For example , we can set grid-column-end: col-3;

Other examples are span with a value that determines how many columns/row we want to span. Example, span 3 , will create a grid-column-end of 3

align/justify/place-self- Allows to poistion a single item within anywhere from its own cell. For example, if you have 6 elements in a single container, you can set a fixed location for cell 5 anywhere inside the container. place-self is also a short hand version for both properties

grid-area- Is a entire shorthand version of 4 values seperated by a /


grid row start, grid column start, grid row end, grid column end 

grid-area: is a property that we can set a value after specifically naming a value with grid-template-area
