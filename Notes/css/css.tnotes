- Tip: Add flex-direction: column on main viewpoint. Set a @media query of min-width: 600-750px to flex-direction:row. This will add a responsive design without needing to add additional spacing once the window becomes smaller. 
- VW is the 'view window'. Equivalent to the actual users window browser window. Commonly used on "height" properties
= Add "GAP" property to add in margins between rows 
- Flexbox axis is determined by the flex-direction property. Default is "row" and can be adjusted to "column" property. 
- Justify content with be the main content of the flex-direction. It will only work if there are empty spaces. "Center" takes the content and centers within the parent container. "Flex-start" and "flex-end" will either begin from the left or right of the container. "Space-between" will look for extra space of the container and distribute it between the elements. "Space-around" is not commonly used as it distributes even spaces but not at the first and last element (maybe useful in some use cases) "Space-evenly" is a more useful property
- "Align-items" for flex box is default to stretch. This references to the text inside the elements.
- *Article* and *Section* elements should contain a *Header* element that includes a *Paragraph* element.
- *Main* element should include the contents of the post
- You can add a section element to semantically define individual sections of the article. Headers should always be used to semantically describe the section
- Having more than one section elements is common in a web page and doesn't require an article element
- CSS style sheet link should always be the last element of the head section
- Keywords is not an important part of the Meta tag if aiming for good SEO. It is not recommended for modern web pages as many search engines ignore it and often use it as an indicator for spam
- Characteristics of meta tags include defining and naming information of data and importance to SEO. 
- HTTP tags is useful to simulate HTTP response headers but is not recommended to force a HTTP response header. They are also useful if you don’t have access to the server configuration 

#DOM# 
- HTML
   HEAD (title)
	 BODY (intro)

	  HEADER (logo)
	    NAV (list and list items)
	      SECTION
	        UL
	          LI LI LI

	            INTRO 
	              MAIN (post intro)
	                H1 H2 H3 (post title)
	                  P  P  P (post body)
	                    FOOTER (social, copyright, emails, etc)



Responsive Portfolio Tips:

-SECTIONS-
- 1st Section for the root(hero), Logo, nav list, scroll and heading.
- 2nd Section for the body which includes intro,  profile photo
- 3rd section for projects 
= Footer for any contact and email info

-FLEXBOX-
- Container 1 to wrap *nav* element as main flexbox container (outer container)
- Container 2 to wrap inside elements as secondary container (inner element) 
- Inside elements include *ul* *li* *buttons* *headings*
- Universal selector. You can add a "*" selector in CSS to apply characteristics for the entire page that has CSS elements. This is a strategy used to override the entire css properties of a page. 

- Flex-flow is shorthand property for defining the direction of the flex container and it's behavior for wrapping

- Justify content is primarily used for rows and align-self for columns.
- Justify aligns the flexible content on the main axis
- Common measurements for absolute units is pixels (px) and centimeters (cm)
- Common measurements for realative values is percentage, em, vh, vw, and rem.
#FLEXBOX IS SINGLE DIMENSIONAL# 
- Row has a horizontal main axis and vertical cross axis. When column, the values are opposite

*Measurements*
- em:  Font size of the parent where present(eg, 2em is twice the size of the current font)
- rem: Font size of the root element.
- vh: 1% of the viewport height.
- vw: 1% of the viewport width.
- percentage: Denotes a percentage value in relation to it's parent element

*Grid and Flexbox Cheatsheet*
display: grid | inline-grid

Grid shorthand with default values:

grid
grid-template-rows: none
grid-template-columns: none
grid-template-areas: none
grid-auto-rows: auto
grid-auto-columns: auto
grid-auto-flow: row
grid-column-gap: 0
grid-row-gap: 0
column-gap: normal
row-gap: normal

#Fr is a fractional unit and 1fr is for 1 part of the available space#
(This works in conjunction with pixels, percentages, etc)

Grid properties for container:
grid-template-columns: measurement units | % units |repeat()

grid-template-rows: measurement units | % units |repeat()

grid-auto-columns: measurement unit (fixed value for all columns)

grid-auto-rows: measurement unit (fixed value for all rows)

grid-template: “header header” auto

“main right” 75vh

“footer footer” 20rem

grid-template-areas: “header header”

“main right”

“footer footer”

Gap:
grid-gap: measurement units

grid-column-gap: measurement units

grid-row-gap: m-unit-1  m-unit-2

Alignment:
justify-items: start | center | end | stretch

align-items: start | center | end | stretch

place-items: start | stretch /* shorthand for two properties above */

Justification:
justify-content: start | center | end | stretch | space-between | space-evenly | space-around

align-content: start | center | end | stretch | space-between | space-evenly | space-around

place-content: center | start

Positioning:
grid-auto-flow: row | column | dense

grid-auto-columns: measurement units

grid-auto-rows: measurement units

Grid properties for items (child)
grid-column: column position /* E.g. 1/2  */

grid-column-start: column start position

grid-column-end: column end position

grid-row:  row position /* E.g. 1/2  */

grid-row-start: row start position

grid-row-end: row end position

grid-area: “some name” |  /*E.g.  2/1/3/2 */ /* Shorthand for row-column properties above. 

Justification and alignment:
justify-self: start | center | end | stretch

align-self: start | center | end | stretch

place-self: start | stretch /* shorthand for two properties above */

*Flexbox*
display: flex | inline-flex

Properties for flexbox container:
flex-direction: row | row-reverse | column | column-reverse

flex-wrap: wrap | nowrap

align-items: flex-start | flex-end | center | stretch

justify-content: flex-start | flex-end | center | space-between | space-evenly | space-around

Properties for flexbox items (child):

- Shorthand property for grow, shrink and basis
flex:

flex-grow: factor of flex’s main size    /* E.g. 1 */

flex-shrink: factor of flex’s main size    /* E.g. 0 */

flex-basis: auto | factor of main’s size | measurement unit

order:position in flex /* Set ascending by default */

align-self:  start | center | end | stretch

- repeat (num, fr) is used to write a short hand grid-template row/columns for grid display
- grid-column: (1/ span 12) *this means that it was begin on the first column and span out twlce columns*

