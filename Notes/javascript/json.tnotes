Javascript Object Notation:
- JSON is basically just an object represented in the form of a string
- to work with JSON, it is common to convert it back to a JS object to work with it's properties and methods
- lightweight, with syntax similar to a stringified JavaScript order
- easier to handle in JavaScript code, since JSON is after all, JS
- often said that JSON is a subset of JavaScript which adheres to syntax rules of the JavaScript language but is more strict with formatting.
- JSON is a file format and common to access third-party data from third-party websites.
- able to pull and access data from different vendors, in which they would provide a .json file
- once downloaded, the .json file can then be converted into a plain JS object
- Steps include getting a stringified JSON data from a server and converting (or "parsing") that data into JS objects in your own code. Once converted, the data can also be stringified back into JSON to be sent back to the server after processing the code locally.  JSON is a string, but it must also be properly formatted with certain rules or JavaScript would not be able to parse into an object. JSON can work with some primitives and some complex data types however only a subset of values in JavaScript can be properly stringified to JSON and parsed from a JavaScript object into a JSON string.

These values include:

primitive values: strings, numbers, boolean, null

complex values: objects and arrays (no functions)

!Objects have double-quoted strings for all keys!

Properties are comma-delimited both in JSON objects and in JSON arrays, just like in regular JavaScript code

String properties must be surrounded in double quotes. For example:
"fruits",
"vegetables"

Number properties are represented using the regular JavaScript number syntax; e.g:

5,
10,
1.2

Boolean properties are represented using the regular JavaScript boolean syntax, that is:
true
and
false
Null as a property is the same as in regular JavaScript; it's just a null

<You can use object literals and array literals, as long as you follow the above rules>

What happens if you try to stringify a data type which is not accepted in JSON syntax?

For example, what if you try to stringify a function? The operation will silently fail.

If you try to stringify some other data types, such as a BigInt number, say 123n, you'd get the following error: Uncaught TypeError: Do not know how to serialize a BigInt

Finally, here is an example of a stringified JSON object, with a single key-value pair:

'{"color":"red"}' 

Here's a bit more complex JSON object:

'{"color":"red", "nestedObject": { "color": "blue" } }' 

The above JSON object encodes two properties:

"color":"red"

"nestedObject": { "color": "blue" }

It's also possible to have a JSON string encoding just an array:

'["one", "two", "three"]'

The above JSON string encodes an array holding three items, three values of the string data type. Obviously, just like objects, arrays can nest other simple or complex data structures.

For example:

'[{ "color": "blue" }, {"color: "red"}]' 

In the above example, the JSON string encodes an array which holds two objects, where each object consists of a single key-value pair, where both values are strings.

//Parse
[js]
const jsonStr = `{"greeting": "hello"}` 
JSON.parse(jsonStr)

// storing JSON string into a JS object and variable
const aPlainObj = JSON.parse(jsonStr)
//reassigning object value of .greeting to 'hey' 
aPlainObj.greeting = 'hey'
aPlainObj;

const data = {
	firstName: "Jason",
	lastName: "Alvarado",
	greeting: "Hello",
}
//converts JS array into a stringified JSON syntax
JSON.stringify(data);

[\js]a

- JSON is unable to hold functions and does not allow the use of JS comments 
- Methods will be excluded from a stringy operation
- Retreiving data from APIs and converting the JSON strings to JS objects is a standard practice
